{"version":3,"sources":["ColorModeSwitcher.js","App.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","App","useState","data","setData","useEffect","fetch","headers","then","response","json","myJson","input","setInput","solution","setSolution","findSolutions","inputString","length","inputArray","trim","split","sort","slice","map","Number","a","b","String","join","i","combination","solutions","theme","textAlign","justify","pt","spacing","minH","minW","p","id","placeholder","onChange","e","target","value","colorScheme","document","getElementById","solutionItems","push","displaySolutions","ReactDOM","render"],"mappings":"oRAIaA,EAAoB,SAAAC,GAAU,IACjCC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAD,aACEC,KAAK,KACLC,SAAS,KACTC,aAAA,oBAAyBP,EAAzB,SACAQ,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXC,QAASb,EACTc,KAAM,cAACV,EAAD,KACFL,K,QC8IKgB,MArIf,WAAgB,IAAD,EACQC,mBAAS,IADjB,mBACNC,EADM,KACDC,EADC,KAkBbC,qBAAU,WAfRC,MAAM,iBACL,CACCC,QAAU,CACR,eAAgB,mBAChB,OAAU,sBAIXC,MAAK,SAASC,GACb,OAAOA,EAASC,UAEjBF,MAAK,SAASG,GACbP,EAAQO,QAKZ,IApBW,MAsBWT,mBAAS,IAtBpB,mBAsBNU,EAtBM,KAsBCC,EAtBD,OA8BgBX,mBAAS,IA9BzB,mBA8BNY,EA9BM,KA8BGC,EA9BH,KA+Bb,SAASC,IACP,IAAIC,EAAcL,EAClB,GAA0B,GAAtBK,EAAYC,OAAhB,CAIA,IAAIC,EAAaF,EAAYG,OAAOC,MAAM,KAG1CJ,GADAE,GADAA,EAAaA,EAAWG,OAAOC,OAAO,IACdC,IAAIC,QAAQH,MAAK,SAACI,EAAGC,GAAJ,OAAUD,EAAIC,KAAGH,IAAII,SACrCC,KAAK,KAE9B,IAAK,IAAIC,EAAE,EAAEA,EAAE3B,EAAKe,OAAOY,IACzB,GAAI3B,EAAK2B,GAAGC,aAAed,EAEzB,YADAF,EAAYZ,EAAK2B,GAAGE,WAIxBjB,EAAY,KA2Cd,OAJAV,qBAAU,WACRW,MACC,CAACJ,IAGF,cAAC,IAAD,CAAgBqB,MAAOA,QAAvB,SACE,eAAC,IAAD,CAAKC,UAAU,SAASxC,SAAS,KAAjC,UACE,eAAC,IAAD,CAAQyC,QAAQ,SAASC,GAAG,MAAMC,QAAQ,MAA1C,UACE,cAAC,IAAD,2BACA,cAAC,EAAD,OAIF,cAAC,IAAD,CAAMC,KAAK,OAAOC,KAAK,OAAOC,EAAG,EAAjC,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAQH,QAAS,EAAjB,UACE,cAAC,IAAD,CAAO5C,KAAK,KAAKgD,GAAG,aAEpBC,YAAY,eACZC,SAAU,SAACC,GAAO/B,EAAS+B,EAAEC,OAAOC,UAGpC,eAAC,IAAD,WACE,cAAC,IAAD,CAAQC,YAAY,OAAOtD,KAAK,KAAKG,QAAQ,UAC3CG,QAAS,WAAOiB,KADlB,mBAKA,cAAC,IAAD,CAAQ+B,YAAY,OAAOtD,KAAK,KAAKG,QAAQ,QAC3CG,QAAS,WA5FvBiD,SAASC,eAAe,cAAcH,MAAQ,GAC9CjC,EAAS,IACTE,EAAY,KAyFA,sBAjEd,SAA0BD,GACxB,IAAIoC,EAAgB,GAEpB,GAAIpC,EAASI,OAAS,EACpB,IAAK,IAAIY,EAAE,EAAGA,EAAEhB,EAASI,OAAOY,IAC9BoB,EAAcC,KACZ,cAAC,IAAD,UACE,cAAC,IAAD,UAAKrC,EAASgB,MADPA,QAKK,IAATlB,GACTsC,EAAcC,KACZ,cAAC,IAAD,UACE,cAAC,IAAD,2BADM,SAOZ,OACE,eAAC,IAAD,CAAOvD,QAAQ,SAAf,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,0BAIJ,cAAC,IAAD,UACGsD,OA2CIE,CAAiBtC,gBCjJhCuC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFN,SAASC,eAAe,W","file":"static/js/main.ffe74471.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  VStack,\n  Grid,\n  theme,\n  HStack,\n  Input,\n  Button,\n  Center,\n  ButtonGroup,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport {useState,useEffect} from 'react';\n\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n} from \"@chakra-ui/react\"\n\nfunction App() {\n  const [data,setData]=useState([]);\n  const getData=()=>{\n    fetch('solutions.json'\n    ,{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    }\n    )\n      .then(function(response){\n        return response.json();\n      })\n      .then(function(myJson) {\n        setData(myJson)\n      });\n  }\n  useEffect(()=>{\n    getData()\n  },[])\n\n  const [input, setInput]=useState(\"\");\n  function resetInputField () {\n    document.getElementById(\"inputField\").value = \"\";\n    setInput(\"\")\n    setSolution([])\n    // reset solutions as well\n  }\n\n  const [solution,setSolution]=useState([]);\n  function findSolutions() {\n    var inputString = input;\n    if (inputString.length == 0) {\n      return\n    }\n\n    var inputArray = inputString.trim().split(\" \");\n    inputArray = inputArray.sort().slice(-4); // take last 4 items, incase multiple spaces present\n    inputArray = inputArray.map(Number).sort((a, b) => a - b).map(String); // stupid javascript sort needs this for numbers;\n    inputString = inputArray.join(\" \");\n\n    for (var i=0;i<data.length;i++) {\n      if (data[i].combination == inputString){\n        setSolution(data[i].solutions);\n        return\n      }\n    }\n    setSolution([]);\n  }\n  function displaySolutions(solution) {\n    var solutionItems = [];\n    \n    if (solution.length > 0) {\n      for (var i=0; i<solution.length;i++) {\n        solutionItems.push(\n          <Tr key={i}>\n            <Td>{solution[i]}</Td>\n          </Tr>\n        )\n      }\n    } else if (input != \"\") {\n      solutionItems.push(\n        <Tr key=\"none\">\n          <Td>No solution</Td>\n        </Tr>\n      )\n    }\n\n\n    return (\n      <Table variant=\"simple\">\n        <Thead>\n          <Tr>\n            <Th>Results</Th>\n          </Tr>\n        </Thead>\n\n        <Tbody>\n          {solutionItems}\n        </Tbody>\n      </Table>\n    )\n  }\n\n  // INSANE! This runs findSolutions() every time input changes\n  // also works as a \"callback\" like in useState/setState but in function form\n  useEffect(() => {\n    findSolutions();\n  }, [input]);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <HStack justify=\"center\" pt=\"5px\" spacing=\"5vw\">\n          <Text>24 Solutions</Text>\n          <ColorModeSwitcher/>\n        </HStack>\n\n      \n        <Grid minH=\"80vh\" minW=\"80vw\" p={3}>\n          <Center>\n            <VStack spacing={8}>\n              <Input size=\"lg\" id=\"inputField\"\n              // placeholder=\"Input numbers here, in the following format: 1 2 3 4\" \n              placeholder=\"E.g. 1 2 3 4\" \n              onChange={(e) => {setInput(e.target.value)}}\n              />\n\n              <ButtonGroup>\n                <Button colorScheme=\"teal\" size=\"lg\" variant=\"outline\"\n                  onClick={() => {findSolutions()}}\n                >\n                  Solve\n                </Button>\n                <Button colorScheme=\"teal\" size=\"lg\" variant=\"ghost\"\n                  onClick={() => {resetInputField()}}\n                >\n                  Clear\n                </Button>\n              </ButtonGroup>\n\n              {displaySolutions(solution)}\n\n            </VStack>\n          </Center>\n        </Grid>\n        \n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}